#!/usr/bin/env bash
###############################################################################
# preprocess  –  clean the raw BoardGameGeek dataset and emit TAB-separated TSV
#
#   • Converts CRLF to LF and strips UTF-8 BOM
#   • Changes ;  →  TAB
#   • Converts  3,5  →  3.5   ONLY if the cell is purely numeric
#   • Removes non-ASCII characters
#   • Generates new unique IDs where the ID column is blank
#   • Discards any data row whose column count ≠ header column count
#
# Usage:  preprocess <input-file>  > output.tsv
###############################################################################
set -euo pipefail

###############################################################################
# 1.  Basic argument checks
###############################################################################
infile=${1:-}
if [[ -z $infile ]]; then
    echo "Usage: $0 <input-file>" >&2; exit 1
fi
if [[ ! -r $infile ]]; then
    echo "Error: '$infile' not found or not readable." >&2; exit 1
fi
if [[ ! -s $infile ]]; then
    echo "Error: '$infile' is empty." >&2; exit 1
fi

###############################################################################
# 2.  Normalise newlines and strip UTF-8 BOM   → temp file
###############################################################################
tmp=$(mktemp)
tr -d '\r' < "$infile" | sed '1s/^\xEF\xBB\xBF//' > "$tmp"

###############################################################################
# 3.  Determine max existing ID (pass-1)  —— used to create new IDs later
###############################################################################
max_id=$(awk -F';' 'NR>1 && $1 != "" { if ($1+0 > m) m=$1 } END{ print m+0 }' "$tmp")

###############################################################################
# 4.  Main cleaning pass (awk)
###############################################################################
awk -v FS=';' -v OFS='\t' -v max="$max_id" '
###############################################################################
# Helper: convert comma decimal IF the whole field is digits,comma,digits
###############################################################################
function numeric_comma_to_dot(v) {
    if (v ~ /^[0-9]+,[0-9]+$/) sub(/,/, ".", v)
    return v
}

###############################################################################
# Pass-0  ——  read header and grab expected column count
###############################################################################
NR == 1 {
    header_line = $0
    expected_nf = NF          # store column count for later validation
    print                    # emit header unchanged (just ;→TAB via OFS)
    next
}

###############################################################################
# For every data row
###############################################################################
{
    # ---- 4.1  skip malformed rows (wrong field count) ---------------------
    if (NF != expected_nf) next

    # ---- 4.2  fill missing ID --------------------------------------------
    if ($1 == "" || $1 ~ /^[[:space:]]+$/) {
        ++max
        $1 = max
    }

    # ---- 4.3  normalise numeric commas -----------------------------------
    for (i = 1; i <= NF; i++) {
        $i = numeric_comma_to_dot($i)
    }

    # ---- 4.4  output line -------------------------------------------------
    print
}
' "$tmp" |
###############################################################################
# 5.  Remove non-ASCII (keep TAB/LF/CR)  and send to stdout
###############################################################################
tr -cd '\11\12\15\40-\176'

# House-keeping
rm -f "$tmp"
